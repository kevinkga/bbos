version: '3.8'

services:
  # Database
  postgres:
    image: postgres:15-alpine
    container_name: bbos-postgres
    environment:
      POSTGRES_DB: bbos
      POSTGRES_USER: bbos_user
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-bbos_dev_password}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-scripts:/docker-entrypoint-initdb.d
    ports:
      - "5432:5432"
    networks:
      - bbos-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U bbos_user -d bbos"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis for sessions and job queue
  redis:
    image: redis:7-alpine
    container_name: bbos-redis
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-bbos_dev_redis}
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - bbos-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Backend API Server
  backend:
    build:
      context: ../backend
      dockerfile: Dockerfile
      target: ${NODE_ENV:-development}
    container_name: bbos-backend
    environment:
      NODE_ENV: ${NODE_ENV:-development}
      PORT: 3001
      DATABASE_URL: postgresql://bbos_user:${POSTGRES_PASSWORD:-bbos_dev_password}@postgres:5432/bbos
      REDIS_URL: redis://:${REDIS_PASSWORD:-bbos_dev_redis}@redis:6379
      JWT_SECRET: ${JWT_SECRET:-dev_jwt_secret_change_in_production}
      SESSION_SECRET: ${SESSION_SECRET:-dev_session_secret_change_in_production}
      
      # OAuth Providers
      GOOGLE_CLIENT_ID: ${GOOGLE_CLIENT_ID}
      GOOGLE_CLIENT_SECRET: ${GOOGLE_CLIENT_SECRET}
      GITHUB_CLIENT_ID: ${GITHUB_CLIENT_ID}
      GITHUB_CLIENT_SECRET: ${GITHUB_CLIENT_SECRET}
      DISCORD_CLIENT_ID: ${DISCORD_CLIENT_ID}
      DISCORD_CLIENT_SECRET: ${DISCORD_CLIENT_SECRET}
      MICROSOFT_CLIENT_ID: ${MICROSOFT_CLIENT_ID}
      MICROSOFT_CLIENT_SECRET: ${MICROSOFT_CLIENT_SECRET}
      
      # AWS/S3 for artifact storage
      AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}
      AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}
      AWS_REGION: ${AWS_REGION:-us-east-1}
      S3_BUCKET: ${S3_BUCKET:-bbos-artifacts}
      
      # Build Server Configuration
      BUILD_SERVER_URL: ${BUILD_SERVER_URL:-http://build-server:8080}
      BUILD_SERVER_TOKEN: ${BUILD_SERVER_TOKEN}
      
      # Email Configuration
      SMTP_HOST: ${SMTP_HOST}
      SMTP_PORT: ${SMTP_PORT:-587}
      SMTP_USER: ${SMTP_USER}
      SMTP_PASS: ${SMTP_PASS}
      FROM_EMAIL: ${FROM_EMAIL:-noreply@bbos.dev}
    volumes:
      - ../backend:/app
      - /app/node_modules
      - backend_uploads:/app/uploads
    ports:
      - "3001:3001"
    networks:
      - bbos-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Frontend Web Application
  frontend:
    build:
      context: ../frontend
      dockerfile: Dockerfile
      target: ${NODE_ENV:-development}
    container_name: bbos-frontend
    environment:
      NODE_ENV: ${NODE_ENV:-development}
      VITE_API_URL: ${VITE_API_URL:-http://localhost:3001}
      VITE_WS_URL: ${VITE_WS_URL:-ws://localhost:3001}
    volumes:
      - ../frontend:/app
      - /app/node_modules
    ports:
      - "3000:3000"
    networks:
      - bbos-network
    depends_on:
      - backend
    restart: unless-stopped

  # Build Server (Armbian build environment)
  build-server:
    build:
      context: ./build-server
      dockerfile: Dockerfile
    container_name: bbos-build-server
    environment:
      BUILD_SERVER_PORT: 8080
      BUILD_SERVER_TOKEN: ${BUILD_SERVER_TOKEN}
      ARMBIAN_CACHE_DIR: /armbian-cache
      MAX_CONCURRENT_BUILDS: ${MAX_CONCURRENT_BUILDS:-2}
    volumes:
      - armbian_cache:/armbian-cache
      - armbian_output:/armbian-output
      - /var/run/docker.sock:/var/run/docker.sock
    ports:
      - "8080:8080"
    networks:
      - bbos-network
    privileged: true
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 60s
      timeout: 30s
      retries: 3

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: bbos-nginx
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - ./ssl:/etc/nginx/ssl:ro
    ports:
      - "80:80"
      - "443:443"
    networks:
      - bbos-network
    depends_on:
      - frontend
      - backend
    restart: unless-stopped

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  backend_uploads:
    driver: local
  armbian_cache:
    driver: local
  armbian_output:
    driver: local

networks:
  bbos-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16 